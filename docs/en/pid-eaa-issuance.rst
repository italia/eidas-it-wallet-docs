.. include:: ../common/common_definitions.rst

.. _pid_eaa_issuance.rst:

PID/(Q)EAA Issuance
+++++++++++++++++++

This section describes the issuance flow for the PID and (Q)EAAs that require a high security implementation profile. 
The relevant entities and interfaces involved in the issuance flow are:

    - *Wallet Provider*: It represents an organization (public or private) that is responsible for the release of an eIDAS-compliant EUDI Wallet Solution. It also issues thes Wallet Instance Attestation to its Wallet Instances by means of an Attestation Service. The Wallet Attestation certifies the genuinity and authenticity of the Wallet Instance and its compliance with a Trust Framework in compliance to the security and privacy requirements.
    - *Wallet Solution*: It represents the entire product and service owned by a Wallet Provider, offered to all Users of that solution. A Wallet Solution must be certified as being EUDI-compliant by a Conformity Assessment Body (CAB).
    - *Wallet Instance*: instance of a Wallet Solution, installed on User's device. It provides interfaces for User interaction with the Wallet Provider, Relying Parties, PID and (Q)EAA Providers.
    - *PID Provider*: It represents the issuer of eIDAS Person Identification Data (PID). It is composed of:

        - OpenID4VCI Component: based on the “OpenID for Verifiable Credential Issuance” specification  `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_ to release PID credentials.
        - National eID Relying Party (OpenID Connect or SAML2): It represents the component to authenticate the End-User with the national Digital Identity Providers.
    - National IdP: It represents preexisting identity systems based on SAML2 or OpenID Connect, already in production in each Member State (for Italy SPID and CIE id authentication schemed notified eIDAS with *LoA* **High**, see `SPID/CIE OpenID Connect Specifications <https://italia.github.io/spid-cie-oidc-docs/en/>`_).
    - *(Q)EAA Issuer*: It represents the issuer of (Q)EAAs. It is composed of:

      - OpenID4VCI Component: based on the “OpenID for Verifiable Credential Issuance” specification  `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_ to release (Q)EAAs.
      - Relying Party: It represents the component to authenticate the End-User with the PID. The (Q)EAA Issuer then acts as a verifier and sends a presentation request to the Wallet Instance according to [`OpenID4VP`_]. The Wallet Instance MUST have a valid PID obtained prior to starting a transaction with the (Q)EAA Issuer.
    

High-Level PID flow
-------------------
  
The :numref:`fig_High-Level-Flow-ITWallet-PID-Issuance` shows a general architecture and highlights the main operations involved in the issuance of a PID.

.. _fig_High-Level-Flow-ITWallet-PID-Issuance:
.. figure:: ../../images/High-Level-Flow-ITWallet-PID-Issuance.svg
    :figwidth: 100%
    :align: center

    PID Issuance - General architecture and high level flow

In the following the main operations are detailed:

    0. **Wallet Instance Setup**: the first time the Wallet Instance is started a preliminary setup phase MUST be carried out. It consists of the release of a verifiable proof issued by the Attestation Service provided by the Wallet Provider that asserts the genuineness, the authenticity and the compliance with a trust framework of the Wallet Instance. The verifiable proof binds a public key corresponding to a local private key generated by the Wallet Instance. 
    1. **Obtaining the trusted PID Provider**: the Wallet Instance queries the Trust Anchor to fetch the trusted PID Provider. 
    2. **Obtaining of PID Provider metadata**: the Wallet Instance establishes the trust to the PID Provider according to the Trust Model, obtaining the Metadata that discloses the formats of the PID, the algorithms supported, and any other parameter required for interoperability needs.
    3. **PID request**: following the Authorization Code Flow in `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_ the Wallet Instance requests a PID to the PID Provider. A fresh key pairs is generated by the Wallet Instance, the public key is used by PID Provider for the key binding of the PID. The PID Provider checks the Wallet Instance by means of the Wallet Attestation and the Trust Chain related to the Wallet Provider
    4. **End-user authentication**: the PID Provider authenticates the End-User with LoA High, acting as an IAM Proxy to the National eID system. 
    5. **PID issuance**: once the User authentication with LoA High happens, the User gives their consent, and the PID Provider releases a PID bound to the key material held by the requesting Wallet instance.

The Wallet Instance Setup phase is described in Section [...]. In the following Section the steps from 1 to 5 are further expanded into more technical detailed steps. 

High-Level (Q)EAA flow
----------------------

The :numref:`fig_High-Level-Flow-ITWallet-QEAA-Issuance` shows a general architecture and highlights the main operations involved in the issuance of a (Q)EAA, under the main following assumptions:

  - the User has a valid PID stored in its own Wallet Instance;
  - the (Q)EAA requires a high security implementation profile.

.. _fig_High-Level-Flow-ITWallet-QEAA-Issuance:
.. figure:: ../../images/High-Level-Flow-ITWallet-QEAA-Issuance.svg
    :figwidth: 70%
    :align: center

    (Q)EAA Issuance - General architecture and high level flow

In the following the main operations are detailed:

    1. **Obtaining the trusted (Q)EAA Issuer**: the Wallet Instance queries the Trust Anchor to fetch the trusted (Q)EAA Issuer. 
    2. **Obtaining of (Q)EAA Issuer metadata**: the Wallet Instance establishes the trust to the (Q)EAA Issuer according to the Trust Model, obtaining the Metadata that discloses the formats of the (Q)EAA, the algorithms supported, and any other parameter required for interoperability needs.
    3. **(Q)EAA request**: following the Authorization Code Flow in `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_ the Wallet Instance requests a (Q)EAA to the (Q)EAA Issuer. A fresh key pairs is generated by the Wallet Instance, the public key is used by (Q)EAA Issuer for the key binding of the (Q)EAA. The (Q)EAA Issuer checks the Wallet Instance by means of the Wallet Attestation and the Trust Chain related to the Wallet Provider
    4. **End-user authentication**: the (Q)EAA Issuer authenticates the End-User with the PID owned by the User, acting as a verifier (Relying Party). 
    5. **(Q)EAA issuance**: once the User authentication with a valid PID happens, the User gives their consent, and the (Q)EAA Issuer releases a (Q)EAA bound to the key material held by the requesting Wallet Instance.



Detailed Flow
-------------

The PID/(Q)EAA Issuance phase is based on the **Authorization Code Flow** with **Pushed Authorization Requests** (PAR) [:rfc:`9126`] and **PKCE** (Proof Key for Code Exchange, :rfc:`7636`) as recommended in `[OIDC4VCI. Draft 13. Section 3.4] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html#section-3.4>`_. A *Wallet Initiated Flow* is considered and the User receives the PID/(Q)EAA directly in response to the Credential Request (*Immediate Flow*). 

.. warning::
  
  All the non-normative examples are referred to the PID Provider issuance flow.

.. _fig_Low-Level-Flow-ITWallet-PID-QEAA-Issuance:
.. figure:: ../../images/Low-Level-Flow-ITWallet-PID-QEAA-Issuance.svg
    :figwidth: 100%
    :align: center
    :target: https://www.plantuml.com/plantuml/svg/dPJVRnf74CVVzwyOEP5g9AoyMseK7DCOrQgewoYFf-LkW96FtUlkB8J-zPtH7iTYd8h6yeDzy_lpdTbFaMtWj6cDJUnTsYmm6DF9DwgfiuxXwcl4S0KsGZ9cuR_d3xz4Y1lnwjRUuHMyUwJLck_QXAUnTy7lXd1xQljcsnOPPavQS3Mg3-mCkWQaYddJTnxybfe-t-ALptns_-7wpz5qCe5PZAdt8YC_ExZv2EaM_88jETZx5E3eRXBSY7rt2tkCnWJd6S5lCS0Etdrxc3rFJHzeeQN8u9Vm759aRE2ig0wW6L2gtdoKchLtImeRu3L2n1Ph9kyqnNceITA7jE5VJhiOam2UVNbu_l8qdVvXNe63UetrIvG2bhNAUMAW28fAgwh3RoWChVO1rZKzbGZ44JR8jh5iop50uO1C4j2ofF_zyrIcQX2aELeIXjw7n6S-UO8d_3jXPBWE63ll8bQyxt0CTKlekA9c31fUrMiTnAtmzV-LTB7suXPofY7KneX1-oup5fz_VP_P7D1Cc2NSgkdz24gcD5wSC3rZTaRrT0N_Y-a5oIAjdEKKKCBBxCU6ipGgoTQsr13leT34K5xPWNW63TSziIe56WD-xoXWhCYDyX7e5TXRc2J16-YVN6UGgz2dI3CooMeaqFyEDBPbw46GW519JaL8XmFJDmMif9T4LEVyE-ArBhEIq3EAOZiom3QYMdywCyxk9t_1ev_0WpnUFoZYcWDheN06OC2k-pi6LGu7NhiB_OiBMw7J9KAud_ivlE3-XxOkUB-4fGzlN3kmVq47qdldIQOfplDPBODmYg5CLmgv2jRnuSnySxZHmybVV9Aw4Wq5h0yxGNcWt4l9nDOrnbYnVXxd6NBEOeybV-Mygt7uepeQtoIv5DjQKIeiVS8QtGFRdhzhcO7yTZv6Z54LkyvLiaY5_oKw5CKABGOfFX-jvtgKB7GpJrKQ8gi6b-GeSvOcDfR7sMjqSWtzKtVt-7Lgdd15aVKcsbQVdgBDcu2jPMp0aClPb84EbsNFr_CXuDRNsLQyIOEmnMI5kdrtHRMBjIp83c-XCj7pIJ6_hOLxP1-mLFgJz9WsxRy0

    PID/(Q)EAA Issuance - Detailed flow

**Steps 1-4 (Discovery):** The User has selected a PID/(Q)EAA Issuer, and the Wallet Instance obtains the metadata for the selected PID/(Q)EAA Issuer.

.. note::

    **Federation Check:** The Wallet Instance needs to check if the PID/(Q)EAA Issuer is part of Federation and then it can consume its Metadata. A non-normative example of a response from the endpoint **.well-known/openid-federation** with the **Entity Configuration** and the **Metadata** of the PID/(Q)EAA Issuer is represented within the section `Entity Configuration Credential Issuer`_.


**Steps 5-6 (PAR Request):** The Wallet Instance creates a PKCE code verifier that sends in a *pushed authorization request*, using the request parameter (see :rfc:`9126` Section 3) to the PID/(Q)EAA Issuer PAR endpoint. The Wallet Instance signs the request using its private key. A OAuth2 client authentication method MUST be involved, since in this flow the pushed authorization endpoint is a protected endpoint. The client authentication is based on the model defined in [:rfc:`7521`] using the Wallet Instance Attestation JWS inside the **client_assertion** parameter. The authorization_details [RAR :rfc:`9396`] parameter is extended to allow Wallet Instance to specify the types of the credentials when requesting authorization for the PID/(Q)EAA issuance.

Below a non-normative example of the PAR.

.. code-block:: http

    POST /as/par HTTP/1.1
    Host: pid-provider.example.org
    Content-Type: application/x-www-form-urlencoded
    
    response_type=code
    &client_id=$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$
    &code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM
    &code_challenge_method=S256
    &request=eyJhbGciOiJSUzI1NiIsImtpZCI6ImsyYmRjIn0.ew0KIC Jpc3MiOiAiczZCaGRSa3F0MyIsDQogImF1ZCI6ICJodHRwczovL3NlcnZlci5leGFtcGxlLmNvbSIsDQo gInJlc3BvbnNlX3R5cGUiOiAiY29kZSBpZF90b2tlbiIsDQogImNsaWVudF9pZCI6ICJzNkJoZFJrcXQz IiwNCiAicmVkaXJlY3RfdXJpIjogImh0dHBzOi8vY2xpZW50LmV4YW1...
    &client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-key-attestation
    &client_assertion=$WalletInstanceAttestation$ 

The JWS header of request object is represented below:

.. code-block:: JSON

  {
    "alg": "ES256",
    "kid": "FifYx03bnosD8m6gYQIfNHNP9cM_Sam9Tc5nLloIIrc",
  }


The JWS payload of the request object is represented below:

.. code-block:: JSON

    {
    "response_type":"code",
    "client_id":"$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$",
    "state":"fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd",
    "code_challenge":"E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM",
    "code_challenge_method":"S256",
    "authorization_details":[
    {
        "type":"openid_credential",
        "format": "vc+sd-jwt",
        "credential_definition": {
            "type": ["PersonIdentificationData"]
        }
    }
    ],
    "redirect_uri":"eudiw://start.wallet.example.org",
    "client_assertion_type":"urn:ietf:params:oauth:client-assertion-type:jwt-key-attestation", 
    }


.. note::

    **Federation Check:** The PID/(Q)EAA Issuer MUST check that the Wallet Provider is part of the federation and in addition it MUST verify the Wallet Instance Attestation validity by checking its signature and data. 


**Step 7 (PAR Response):** The PID/(Q)EAA Issuer creates a new request URI representing a new authorization request and returns it to the Wallet Instance. 

.. code-block:: http

    HTTP/1.1 201 Created
    Cache-Control: no-cache, no-store
    Content-Type: application/json
    
    {
        "request_uri":"urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2",
        "expires_in": 60
    }
    


**Steps 8-9 (Authorization Request):** The Wallet Instance sends an authorization request to the PID/(Q)EAA Issuer authorization endpoint.

.. code-block:: http

    GET /authorize?client_id=$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$&request_uri=urn%3Aietf%3Aparams%3Aoauth%3Arequest_uri%3Abwc4JK-ESC0w8acc191e-Y1LTC2 HTTP/1.1
    Host: pid-provider.example.org
 

.. note::

   **User Authentication and Consent:** The PID Provider performs the User authentication based on the requirements of eIDAS LoA High by means of national notified eIDAS scheme and asks the User consent for the PID issuance. 
   The (Q)EAA Issuer performs the User authentication requesting a valid PID to the Wallet Instance. The (Q)EAA Issuer MUST use [`OpenID4VP`_] to dynamically request presentation of the PID. From a protocol perspective, the (Q)EAA Issuer then acts as a verifier and sends a presentation request to the Wallet Instance. The Wallet Instance MUST have a valid PID obtained prior to starting a transaction with the (Q)EAA Issuer.

**Steps 10-11 (Authorization Response):** The PID/(Q)EAA Issuer sends an authorization code to the Wallet Instance. 

.. note::

    The Wallet Instance redirect URI is a universal or app link registered with the local operating system, so this latter will resolve it and pass the response to the Wallet Instance.
 
.. code-block:: http

    HTTP/1.1 302 Found
    Location: eudiw://start.wallet.example.org?code=SplxlOBeZQQYbYS6WxSbIA&state=fyZiOL9Lf2CeKuNT2JzxiLRDink0uPcd&iss=https%3A%2F%2Fpid-provider.example.org

**Steps 12-13 (DPoP Proof for Token Endpoint)**: The Wallet Instance creates a key for DPoP and a fresh DPoP proof for the token request to the PID/(Q)EAA Issuer. DPoP provides a way to bind the access token to a certain sender (Wallet Instance) `[DPoP-draft16] <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop-16>`_. Thus, it mitigates the misuse of leaked or stolen Access Tokens at the Credential Endpoint of PID/(Q)EAA Issuer as the attacker needs to present a valid DPoP proof.

**Step 14 (Token Request):** The Wallet Instance sends a token request to the PID/(Q)EAA Issuer token endpoint using the authorization *code*, *code_verifier*, *DPoP proof* and *private_key_jwt*.

.. code-block:: http

    POST /token HTTP/1.1
    Host: pid-provider.example.org
    Content-Type: application/x-www-form-urlencoded
    DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6Ik
        VDIiwieCI6Imw4dEZyaHgtMzR0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCR
        nMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFqSG10NnY5VERWclUwQ2R2R1JE
        QSIsImNydiI6IlAtMjU2In19.eyJqdGkiOiItQndDM0VTYzZhY2MybFRjIiwiaHRtIj
        oiUE9TVCIsImh0dSI6Imh0dHBzOi8vc2VydmVyLmV4YW1wbGUuY29tL3Rva2VuIiwia
        WF0IjoxNTYyMjYyNjE2fQ.2-GxA6T8lP4vfrg8v-FdWP0A0zdrj8igiMLvqRMUvwnQg
        4PtFLbdLXiOSsX0x7NVY-FNyJK70nfbV37xRZT3Lg

    client_id=$thumprint-of-the-jwk-in-the-cnf-wallet-attestation$
    &grant_type=authorization_code
    &code=SplxlOBeZQQYbYS6WxSbIA
    &redirect_uri=eudiw://start.wallet.example.org
    &code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
    &client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer
    &client_assertion=eyJhbGciOiJIUzI1NiI


**Step 15 (Token Response):** The PID/(Q)EAA Issuer validates the request and if it is successful, it issues an *access token* (bound to the DPoP key) and a fresh *c_nonce*.  

.. code-block:: http

    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store
    
    {
    "access_token": "Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU",
    "token_type": "DPoP",
    "expires_in": 2677,
    "c_nonce": "tZign[...]snFbp",
    "c_nonce_expires_in": 86400
    }


**Steps 16-18 (DPoP Proof for Credential Endpoint):** The Wallet Instance creates a new key pair to which the new credential shall be bound. Then, it creates a proof of possession with the new key and the *c_nonce* obtained in **Step 15** and it creates a DPoP proof for the request to the PID/(Q)EAA credential issuance endpoint.  

**Step 19 (Credential Request):** The Wallet Instance sends a PID/(Q)EAA issuance request to the PID/(Q)EAA credential endpoint. It contains the *access token*, the *DPoP proof*, the *credential type*, the *proof* (proof of possession of the key) and the *format*.

.. note::

    **PID Credential Schema and Status registration:** The PID/(Q)EAA Issuer MUST register all the issued credentials for their later revocation, if needed. 

.. code-block:: http

    POST /credential HTTP/1.1
    Host: pid-provider.example.org
    Content-Type: application/x-www-form-urlencoded
    Authorization: DPoP Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU
    DPoP: eyJ0eXAiOiJkcG9wK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6Ik
        VDIiwieCI6Imw4dEZyaHgtMzR0VjNoUklDUkRZOXpDa0RscEJoRjQyVVFVZldWQVdCR
        nMiLCJ5IjoiOVZFNGpmX09rX282NHpiVFRsY3VOSmFqSG10NnY5VERWclUwQ2R2R
        1JEQSIsImNydiI6IlAtMjU2In19.eyJqdGkiOiJlMWozVl9iS2ljOC1MQUVCIiwiaHRtIj
        oiR0VUIiwiaHR1IjoiaHR0cHM6Ly9yZXNvdXJjZS5leGFtcGxlLm9yZy9wcm90ZWN0Z
        WRyZXNvdXJjZSIsImlhdCI6MTU2MjI2MjYxOCwiYXRoIjoiZlVIeU8ycjJaM0RaNTNF
        c05yV0JiMHhXWG9hTnk1OUlpS0NBcWtzbVFFbyJ9.2oW9RP35yRqzhrtNP86L-Ey71E
        OptxRimPPToA1plemAgR6pxHF8y6-yqyVnmcw6Fy1dqd-jfxSYoMxhAJpLjA
    
    credential_definition=%7B%22type%22:%5B%22PersonIdentificationData%22%5D%7D
    &format=vc+sd-jwt
    &proof=%7B%22proof_type%22:%22...-ace0-9c5210e16c32%22%7D



A non-normative example of proof parameter is given below:

.. code-block:: JSON

    {
    "proof_type": "jwt",
    "jwt": "eyJraWQiOiJkaWQ6ZXhhbXBsZTplYm …"
    }


Where the decoded content of the JWT is represented below:

.. code-block:: JSON

  {
    "alg": "ES256",
    "typ": "openid4vci-proof+jwt",
    "kid": "dB67gL7ck3TFiIAf7N6_7SHvqk0MDYMEQcoGGlkUAAw"
  }

.. code-block:: JSON

    {
    "iss": "0b434530-e151-4c40-98b7-74c75a5ef760",
    "aud": "https://pid-provider.example.org",
    "iat": 1504699136,
    "nonce": "tZign...snFbp"
    }



**Steps 20-22 (Credential Response):** The PID/(Q)EAA Issuer checks the *DPoP proof* and whether the *access token* is valid and suitable for the requested PID/(Q)EAA. It also checks the proof of possession for the key material the new credential shall be bound to. If all checks succeed, the PID/(Q)EAA Issuer creates a new credential bound to the key material and sends it to the Wallet Instance. The Wallet Instance MUST perform the PID/(Q)EAA integrity and authenticity checks and if it is successful can proceed with secure storage of the credential. 

.. code-block:: http

    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache
    
    {
    "format": "vc+sd-jwt"
    "credential" : "LUpixVCWJk0eOt4CXQe1NXK[...]WZwmhmn9OQp6YxX0a2L",
    "c_nonce": "fGFF7[...]UkhLa",
    "c_nonce_expires_in": 86400
    }

Pushed Authorization Request Endpoint
-------------------------------------

Pushed Authorization Request (PAR) Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The requests to the PID/(Q)EAA authorization endpoint MUST be HTTP with method POST, with the following mandatory parameters in the HTTP request message body, encoded in ``application/x-www-form-urlencoded`` format.

.. _table_http_request_claim: 
.. list-table:: PAR http request parameters
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **response_type**
      - MUST be set to ``code``.
      - :rfc:`6749`
    * - **client_id**
      - MUST be set to the thumbprint of the ``jwk`` value in the ``cnf`` parameter inside the Wallet Instance Attestation.
      - :rfc:`6749`
    * - **code_challenge**
      - A challenge derived from the **code verifier** that is sent in the authorization request
      - :rfc:`7636#section-4.2`.
    * - **code_challenge_method**
      - A method that was used to derive **code challenge**. It MUST be set to ``S256``.
      - :rfc:`7636#section-4.3`.
    * - **request**
      - It MUST be a signed JWT. The private key corresponding to the public one in the ``cnf`` parameter inside the Wallet Instance Attestation MUST be used for signing the request object.
      - `OpenID Connect Core. Section 6 <https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests>`_
    * - **client_assertion_type**
      - It MUST be set to ``urn:ietf:params:oauth:client-assertion-type:jwt-key-attestation``.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_
    * - **client_assertion**
      - It MUST be the Wallet Instance Attestation signed JWT.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_

The JWT Request Object has the following JOSE header parameters:

.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **JOSE header**
      - **Description**
      - **Reference**
    * - **alg**
      - A digital signature algorithm identifier such as per IANA "JSON Web Signature and Encryption Algorithms" registry. It MUST be one of the supported algorithms in Section `Cryptographic Algorithms <algorithms.html>`_ and MUST NOT be none or an identifier for a symmetric algorithm (MAC).
      - :rfc:`7516#section-4.1.1`.
    * - **kid**
      - Unique identifier of the JWK as base64url-encoded JWK Thumbprint value.
      - :rfc:`7638#section_3`. 

.. note::
  The parameter **typ**, if omitted, assumes the implicit value **JWT**.


The JWT payload is given by the following parameters:

.. _table_jwt_request:
.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **iss**
      - It MUST be set to the ``client_id``.
      - :rfc:`9126` and :rfc:`7519`.
    * - **aud**
      - It MUST be set to the identifier of the PID/(Q)EAA Issuer.
      - :rfc:`9126` and :rfc:`7519`.
    * - **exp**
      - UNIX Timestamp with the expiry time of the JWT, coded as NumericDate.
      - :rfc:`9126` and :rfc:`7519`.
    * - **iat**
      - UNIX Timestamp with the time of JWT issuance, coded as NumericDate.
      - :rfc:`9126` and :rfc:`7519`.
    * - **response_type**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **client_id**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **state**
      - Unique session identifier at the client side. This value will be returned to the client in the response, at the end of the authentication. It MUST be a random string with at least 32 alphanumeric characters.
      - See `OpenID.Core#AuthRequest <https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest>`_.
    * - **code_challenge**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **code_challenge_method**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **authorization_details**
      - Array of JSON Object. Each JSON Object MUST include the following claims:
            
            - **type**: it MUST be set to ``openid_credential``,
            - **format**: it MUST be set to ``vc+sd-jwt``,
            - **credential_definition**: JSON Object. It MUST have the **type** claim which MUST be set in accordance to the type of the requested PID/(Q)EAA that is obtained from the PID/(Q)EAA Issuer metadata. For example, in the case of the PID, it MUST be set to ``PersonIdentificationData``
      - See [RAR :rfc:`9396`] and `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
    * - **redirect_uri**
      -  Redirection URI to which the response will be sent. It MUST be an universal or app link registered with the local operating system, so this latter will resolve it and pass the response to the Wallet Instance.
      - See `OpenID.Core#AuthRequest <https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest>`_.
    * - **client_assertion_type**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **client_assertion**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.


Pushed Authorization Request (PAR) Response
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the verification is successful, the PID/(Q)EAA Issuer MUST provide the response with a *201 HTTP status code*. The following parameters are included as top-level members in the HTTP response message body, using the ``application/json`` media type as defined in [:rfc:`8259`].

.. _table_http_response_claim:
.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **request_uri**
      - The request URI corresponding to the authorization request posted. This URI MUST be a single-use reference to the respective authorization request. It MUST contain some part generated using a cryptographically strong pseudorandom algorithm. The value format MUST be ``urn:ietf:params:oauth:request_uri:<reference-value>`` with ``<reference-value>`` as the random part of the URI that references the respective authorization request data.
      - [:rfc:`9126`].
    * - **expires_in**
      - A JSON number that represents the lifetime of the request URI in seconds as a positive integer.
      - [:rfc:`9126`].


Authorization endpoint
----------------------

The authorization endpoint is used to interact with the PID/(Q)EAA Issuer and obtain an authorization grant.
The authorization server MUST first verify the identity of the resource owner (the User that own it's credentials) 
as defined in the :rfc:`6749`.

Authorization Request
^^^^^^^^^^^^^^^^^^^^^^^

The Authorization request is issued by the Wallet Instance Browser, HTTP **POST** or **GET** methods MAY be used. When the method **POST** is used, the parameters MUST be sent using the *Form Serialization*. When the method **GET** is used, the parameters MUST be sent using the *Query String Serialization*. For more details see `OpenID.Core#Serializations <https://openid.net/specs/openid-connect-core-1_0.html#Serializations>`_.

The mandatory parameters in the HTTP authentication request are specified in the following table.

.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **client_id**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **request_uri**
      - It MUST be set to the same value as obtained by PAR Response. See :ref:`Table of the HTTP PAR Response parameters <table_http_response_claim>`.
      - [:rfc:`9126`].


Authorization Response
^^^^^^^^^^^^^^^^^^^^^^^

The authentication response is returned by the PID/(Q)EAA authorization endpoint at the end of the authentication flow.

If the authentication is successful the PID/(Q)EAA Issuer redirects the User by adding the following query parameters as required to the *redirect_uri*. The redirect URI MUST be an universal or app link registered with the local operating system, so this latter is able to resolve its value and delegates the Wallet Instance for the processing.

.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **code**
      - Unique *Authorization Code* that the Wallet Instance submits to the Token Endpoint.
      - [:rfc:`6749#section-4.1.2`], `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_
    * - **state**
      - The Wallet Instance MUST check the correspondence with the state value in the request object. It is defined as in the :ref:`Table of the JWT Request parameters <table_jwt_request>`.
      - [:rfc:`6749#section-4.1.2`].
    * - **iss**
      - Unique identifier of the PID/(Q)EAA Issuer who created the Authentication Response. The Wallet Instance MUST validate this parameter.
      - `OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response <https://www.ietf.org/archive/id/draft-meyerzuselhausen-oauth-iss-auth-resp-02.html>`_, `[RFC7519, Section 4.1.1] <https://www.iana.org/go/rfc7519>`_.



Token endpoint
--------------

The token endpoint is used by the Wallet Instance 
to obtain an access token by presenting its authorization grant, as 
defined in :rfc:`6749`.

Token Request
^^^^^^^^^^^^^^^

The request to the PID/(Q)EAA Token endpoint  MUST be an HTTP request with method POST, where its body message is encoded in ``application/x-www-form-urlencoded`` format. The Wallet Instance sends the Token endpoint request with *private_key_jwt* authentication and a *DPoP proof* containing the mandatory parameters, defined in the table below.

The Token endpoint MUST accept and validate the DPoP proof sent in the DPoP HTTP header. The Token endpoint MUST validate the DPoP proof based on the steps defined in Section 4.3 of the DPoP specifications `[DPoP-draft16] <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop-16>`_. Thus, this mitigates the misuse of leaked or stolen access tokens at the credential endpoint. If the DPoP proof is invalid, the Token endpoint returns an error response, according to Section 5.2 of [:rfc:`6749`] with ``invalid_dpop_proof`` as the value of the error parameter. 


.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **client_id**
      - It MUST be set as in the :ref:`Table of the HTTP parameters <table_http_request_claim>`.
      - See :ref:`Table of the HTTP parameters <table_http_request_claim>`.
    * - **grant_type**
      - It MUST be set to ``authorization_code``.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_.
    * - **code**
      - Authorization code returned in the Authentication Response.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_.
    * - **redirect_uri**
      - It MUST be set as in the request object :ref:`Table of the JWT Request parameters <table_jwt_request>`.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_.
    * - **code_verifier**
      - Verification code of the **code_challenge**.
      - `Proof Key for Code Exchange by OAuth Public Clients <https://datatracker.ietf.org/doc/html/rfc7636>`_.
    * - **client_assertion_type**
      - It MUST be set to ``urn:ietf:params:oauth:client-assertion-type:jwt-bearer``.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_.
    * - **client_assertion**
      - JWT signed with the Wallet Instance private key containing the following parameters:
      
        - **iss**: This MUST contain the ``client_id``.
        - **sub**: This MUST contain the ``iss``. 
        - **aud**: URL of the PID/(Q)EAA Token Endpoint.
        - **iat**: UNIX Timestamp with the time of the JWT issuance, coded as NumericDate as indicated in RFC 7519.
        - **exp**: UNIX Timestamp with the expiry time of the JWT, coded as NumericDate as indicated in RFC 7519.
        - **jti**: Unique Identifier for this authentication request, generated by the Wallet Instance. E.g., uuid4 format.
      - `Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants <https://www.rfc-editor.org/rfc/rfc7521>`_.

A **DPoP proof** is included in an HTTP request using the ``DPoP`` header parameter containing a DPoP JWS.

The JOSE header of a **DPoP JWT** MUST contain at least the following parameters:

.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **JOSE header**
      - **Description**
      - **Reference**
    * - **typ** 
      - It MUST be equal to ``dpop+jwt``. 
      - [:rfc:`7515`] and [:rfc:`8725`. Section 3.11].
    * - **alg** 
      - A digital signature algorithm identifier such as per IANA "JSON Web Signature and Encryption Algorithms" registry. It MUST be one of the supported algorithms in Section :ref:`Cryptographic Algorithms <supported_algs>` and MUST NOT be none or an identifier for a symmetric algorithm (MAC).
      - [:rfc:`7515`].
    * - **jwk** 
      - representing the public key chosen by the client, in JSON Web Key (JWK) [RFC7517] format, as defined in Section 4.1.3 of [RFC7515]. It MUST NOT contain a private key.
      - [:rfc:`7517`] and [:rfc:`7515`].


The payload of a **DPoP proof** MUST contain at least the following claims:

.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **jti**
      - Unique identifier for the DPoP proof JWT. The value MUST be assigned in a *UUID v4* string format according to [:rfc:`4122`].
      - [:rfc:`7519`. Section 4.1.7].
    * - **htm**
      - The value of the HTTP method of the request to which the JWT is attached.
      - [:rfc:`9110`. Section 9.1].
    * - **htu**
      - The HTTP target URI, without query and fragment parts, of the request to which the JWT is attached.
      - [:rfc:`9110`. Section 7.1].
    * - **iat**
      - UNIX Timestamp with the time of JWT issuance, coded as NumericDate as indicated in :rfc:`7519`. 
      - [:rfc:`7519`. Section 4.1.6].


Token Response
^^^^^^^^^^^^^^^

Token endpoint response MUST contain the following mandatory claims.

.. list-table:: 
    :widths: 20 60 20
    :header-rows: 1

    * - **Claim**
      - **Description**
      - **Reference**
    * - **access_token**
      - The *DPoP-bound Access Token*, in signed JWT format, allows accessing the PID/(Q)EAA Credential Endpoint for obtaining the credential.
      - :rfc:`6749`.
    * - **token_type**
      - Type of *Access Token* returned. It MUST be equal to ``DPoP``.
      - :rfc:`6749`.
    * - **expires_in**
      - Expiry time of the *Access Token* in seconds.
      - :rfc:`6749`.
    * - **c_nonce**
      - JSON string containing a nonce to be used to create a *proof of possession* of key material when requesting a Credential. 
      - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
    * - **c_nonce_expires_in**
      - JSON integer, it represents the lifetime in seconds of the **c_nonce**.
      - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.

Access Token
^^^^^^^^^^^^

A DPoP-bound Access Token is provided by the PID/(Q)EAA Token endpoint as a result of a successful token request. The Access Token is encoded in JWT format, according to [:rfc:`7519`]. The Access Token MUST have at least the following mandatory claims and it MUST be bound to the public key that is provided by the DPoP proof. This binding can be accomplished based on the methodology defined in Section 6 of `[DPoP-draft16] <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop-16>`_.

.. list-table:: 
  :widths: 20 60 20
  :header-rows: 1

  * - **Claim**
    - **Description**
    - **Reference**
  * - **iss** 
    - It MUST be an HTTPS URL that uniquely identifies the PID/(Q)EAA Issuer. The Wallet Instance MUST verify that this value matches the PID/(Q)EAA Issuer where it has requested the credential.
    - [:rfc:`9068`], `[RFC7519, Section 4.1.1] <https://www.iana.org/go/rfc7519>`_.
  * - **sub** 
    - It identifies the principal that is the subject of the JWT. It MUST be set to the value of the ``sub`` field in the PID/(Q)EAA SD-JWT-VC. 
    - [:rfc:`9068`], [:rfc:`7519`] and [`OpenID.Core#SubjectIDTypes <https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes>`_].
  * - **client_id** 
    - MUST be set to the *jwk* value in the *cnf* parameter inside the Wallet Instance Attestation. 
    - [:rfc:`9068`].
  * - **aud** 
    - It MUST match the value *client_id*. The RP MUST verify that this value matches its client ID.
    - [:rfc:`9068`].
  * - **iat** 
    - UNIX Timestamp with the time of JWT issuance, coded as NumericDate as indicated in :rfc:`7519`. 
    - [:rfc:`9068`], [:rfc:`7519`. Section 4.1.6].
  * - **exp**
    - UNIX Timestamp with the expiry time of the JWT, coded as NumericDate as indicated in :rfc:`7519`.
    - [:rfc:`9068`], [:rfc:`7519`].
  * - **jti** 
    - It MUST be a String in *uuid4* format. Unique Token ID identifier that the RP MAY use to prevent reuse by rejecting the Token ID if already processed.
    - [:rfc:`9068`], [:rfc:`7519`].
  * - **jkt**
    - JWK SHA-256 Thumbprint Confirmation Method. The value of the jkt member MUST be the base64url encoding (as defined in [RFC7515]) of the JWK SHA-256 Thumbprint of the DPoP public key (in JWK format) to which the access token is bound.
    - [`DPoP-draft16 <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop-16>`_. Section 6.1] and [:rfc:`7638`].



Credential endpoint
-------------------

The Credential Endpoint issues a Credential as approved by the End-User upon presentation of a valid Access Token representing this approval, as defined in `OPENID4VCI`_.

Credential Request
^^^^^^^^^^^^^^^^^^^

A Wallet Instance makes a PID/(Q)EAA Request to the PID/(Q)EAA Credential endpoint by sending the following mandatory parameters in the entity-body of an HTTP POST request using the `application/json` media type.
The Credential endpoint MUST accept and validate the *DPoP proof* sent in the DPoP field of the Header based on the steps defined in Section 4.3 of [DPoP-draft16]. The *DPoP proof* in addition to the values that are defined in the Token Endpoint section MUST contain the following claim:

  - **ath**: hash of the Access Token. The value MUST be the result of a base64url encoding (as defined in Section 2 of :rfc:`7515`) the SHA-256 hash of the ASCII encoding of the associated Access Token's value.

If the *DPoP proof* is invalid, the Credential endpoint returns an error response per Section 5.2 of [:rfc:`6749`] with `invalid_dpop_proof` as the value of the error parameter.  

.. warning::
  The Wallet Instance MUST create a **new DPoP proof** for the Credential request and MUST NOT use the previously created proof for the Token Endpoint. 


.. list-table:: 
  :widths: 20 60 20
  :header-rows: 1

  * - **Claim**
    - **Description**
    - **Reference**
  * - **credential_definition**
    - JSON object containing the detailed description of the credential type. It MUST have at least the **type** sub claims which is a JSON array containing the type values the Wallet shall request in the subsequent Credential Request. It MUST be set in accordance to the type of the requested PID/(Q)EAA that is obtained from the PID/(Q)EAA Issuer metadata. For example, in the case of the PID, it MUST be set to ``PersonIdentificationData``.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
  * - **format** 
    - Format of the Credential to be issued. This MUST be `vc+sd-jwt`.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
  * - **proof**
    - JSON object containing proof of possession of the key material the issued Credential shall be bound to. The proof object MUST contain the following mandatory claims:

      - **proof_type**: JSON string denoting the proof type. It MUST be `jwt`.
      - **jwt**: the JWT used as proof of possession. 
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.

.. note::

  If the **format** value is `mso_mdoc`, the credential request MUST contain the doctype claim which is a JSON string identifying the credential type according to `EIDAS-ARF`_ . See Appendix E.2. of `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_ for more details.


The JWT proof type MUST contain the following parameters for the JOSE header and the JWT body:

.. list-table:: 
  :widths: 20 60 20
  :header-rows: 1

  * - **JOSE Header**
    - **Description**
    - **Reference**
  * - **alg**
    - A digital signature algorithm identifier such as per IANA "JSON Web Signature and Encryption Algorithms" registry. It MUST be one of the supported algorithms in Section :ref:`Cryptographic Algorithms <supported_algs>` and MUST NOT be ``none`` or an identifier for a symmetric algorithm (MAC).
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_, [:rfc:`7515`], [:rfc:`7517`].
  * -  **typ** 
    - MUST be `openid4vci-proof+jwt`.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_, [:rfc:`7515`], [:rfc:`7517`].
  * - **kid** 
    - It MUST contain the identifier of the key material the PID/(Q)EAA shall be bound to.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_, [:rfc:`7515`], [:rfc:`7517`].

.. list-table:: 
  :widths: 20 60 20
  :header-rows: 1

  * - **Claim**
    - **Description**
    - **Reference**
  * - **iss**
    - The value of this claim MUST be the **client_id** of the Wallet Instance. 
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_, `[RFC7519, Section 4.1.1] <https://www.iana.org/go/rfc7519>`_.
  * - **aud**
    - The value of this claim MUST be the identifier URL of the PID/(Q)EAA Issuer.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
  * - **iat**
    - UNIX Timestamp with the time of JWT issuance, coded as NumericDate as indicated in :rfc:`7519`. 
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_, [:rfc:`7519`. Section 4.1.6].
  * - **nonce**
    - The value type of this claim MUST be a string, where the value is a **c_nonce** provided by the PID/(Q)EAA Issuer in the Token response.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.



Credential Response
^^^^^^^^^^^^^^^^^^^^

Credential Response to the Wallet Instance MUST be sent using `application/json` media type. The response MUST contain the following mandatory claims: 

.. list-table:: 
  :widths: 20 60 20
  :header-rows: 1

  * - **Claim**
    - **Description**
    - **Reference**
  * - **format**
    - Format of the Credential to be issued. This MUST be `vc+sd-jwt`.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
  * - **credential**
    - Contains the issued PID/(Q)EAA. It MUST be an SD-JWT JSON Object (see Section :ref:`PID/(Q)EAA Data Model <pid_eaa_data_model.rst>`).
    - Appendix E in `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
  * - **c_nonce**
    - JSON string containing a nonce to be used to create a *proof of possession* of key material when requesting a further credential or for renewal credential. 
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.
  * - **c_nonce_expires_in**
    - JSON integer corresponding to the **c_nonce** lifetime in seconds.
    - `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.

.. note::

  If the **format** value is `mso_mdoc`, the **credential** value MUST be a base64url-encoded JSON string according to Appendix E of `[OIDC4VCI. Draft 13] <https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html>`_.


.. _Entity Configuration Credential Issuer:

Entity Configuration Credential Issuer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Below a non-normative example of an Entity Configuration containing an `openid_credential_issuer` metadata.

.. code-block:: http
    
      HTTP/1.1 200 OK
      Content-Type: application/entity-statement+jwt

      {

        "alg": "RS256",
        "kid": "FANFS3YnC9tjiCaivhWLVUJ3AxwGGz_98uRFaqMEEs",
        "typ": "entity-statement+jwt"

      }
      .
      {
        "exp": "1649610249",
        "iat": "1649437449",
        "iss": "https://pid-provider.example.org",
        "sub": "https://pid-provider.example.org",
        "jwks": {
          "keys": [{
            "kty": "RSA",
            "use": "sig",
            "n": "1Ta-sE …",
            "e": "AQAB",
            "kid": "FANFS3YnC9tjiCaivhWLVUJ3AxwGGz_98uRFaqMEEs"
          }]
        },
        "metadata": {
          "openid_credential_issuer": {
            "credential_issuer": "https://pid-provider.example.org",
            "authorization_endpoint": "https://pid-provider.example.org/connect/authorize",
            "token_endpoint": "https://pid-provider.example.org/connect/token",
            "pushed_authorization_request_endpoint": "https://pid-provider.example.org/connect/par",
            "dpop_signing_alg_values_supported": ["RS256", "RS512", "ES256", "ES512"],
            "credential_endpoint": "https://pid-provider.example.org/credential",
            "credentials_supported": [
              {
                "format": "vc+sd-jwt",
                "id": "eu.eudiw.pid.it",
                "cryptographic_binding_methods_supported": ["jwk"],
                "cryptographic_suites_supported": ["RS256", "RS512", "ES256", "ES512"],
                "display": [{
                    "name": "PID Provider Italiano di esempio",
                    "locale": "it-IT",
                    "logo": {
                      "url": "https://pid-provider example.org/public/logo.svg",
                      "alt_text": "logo di questo PID Provider"
                    },
                    "background_color": "#12107c",
                    "text_color": "#FFFFFF"
                  },
                  {
                    "name": "Example Italian PID Provider",
                    "locale": "en-US",
                    "logo": {
                      "url": "https://pid-provider.example.org/public/logo.svg",
                      "alt_text": "The logo of this PID Provider"
                    },
                    "background_color": "#12107c",
                    "text_color": "#FFFFFF"
                  }
                ],
                "credential_definition": {
                  "type": ["PersonIdentificationData"],
                  "credentialSubject": {
                    "given_name": {
                      "mandatory": true,
                      "display": [{
                          "name": "Current First Name",
                          "locale": "en-US"
                        },
                        {
                          "name": "Nome",
                          "locale": "it-IT"
                        }
                      ]
                    },
                    "family_name": {
                      "mandatory": true,
                      "display": [{
                          "name": "Current Family Name",
                          "locale": "en-US"
                        },
                        {
                          "name": "Cognome",
                          "locale": "it-IT"
                        }
                      ]
                    },
                    "birthdate": {
                      "mandatory": true,
                      "display": [{
                          "name": "Date of Birth",
                          "locale": "en-US"
                        },
                        {
                          "name": "Data di Nascita",
                          "locale": "it-IT"
                        }
                      ]
                    },
                    "place_of_birth": {
                      "mandatory": true,
                      "display": [{
                          "name": "Place of Birth",
                          "locale": "en-US"
                        },
                        {
                          "name": "Luogo di Nascita",
                          "locale": "it-IT"
                        }
                      ]
                    },
                    "unique_id": {
                      "mandatory": true,
                      "display": [{
                          "name": "Unique Identifier",
                          "locale": "en-US"
                        },
                        {
                          "name": "Identificativo univoco",
                          "locale": "it-IT"
                        }
                      ]
                    },
                    "tax_id_code": {
                      "mandatory": true,
                      "display": [{
                          "name": "Tax Id Number",
                          "locale": "en-US"
                        },
                        {
                          "name": "Codice Fiscale",
                          "locale": "it-IT"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },

          "federation_entity": {
            "organization_name": "Pid Provider Organization Example",
            "homepage_uri": "https://pid-provider.example.org",
            "policy_uri": "https://pid-provider.example.org/privacy_policy",
            "tos_uri": "https://pid-provider.example.org/info_policy",
            "logo_uri": "https://pid-provider.example.org/logo.svg"
          },

          "openid_relying_party": {
            <This is the metadata of the PID Provider acting as a Relying Party in the national digital identity framework (CIE/SPID). See spid-cie-oidc-docs for details.>
          }
        }
      }
